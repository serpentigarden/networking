use std::net::{ Ipv4Addr, UdpSocket };
use std::io::Error;

fn main() -> Result<(), Error> {
    let socket = UdpSocket::bind((Ipv4Addr::UNSPECIFIED, 0))?;
    /*
   0                   1                   2                   3
   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |     op (1)    |   htype (1)   |   hlen (1)    |   hops (1)    |
   +---------------+---------------+---------------+---------------+
   |                            xid (4)                            |
   +-------------------------------+-------------------------------+
   |           secs (2)            |           flags (2)           |
   +-------------------------------+-------------------------------+
   |                          ciaddr  (4)                          |
   +---------------------------------------------------------------+
   |                          yiaddr  (4)                          |
   +---------------------------------------------------------------+
   |                          siaddr  (4)                          |
   +---------------------------------------------------------------+
   |                          giaddr  (4)                          |
   +---------------------------------------------------------------+
   |                          chaddr  (16)                         |
   +---------------------------------------------------------------+
   |                          sname   (64)                         |
   +---------------------------------------------------------------+
   |                          file    (128)                        |
   +---------------------------------------------------------------+
   |                          options (variable)                   |
   +---------------------------------------------------------------+
    */
    let mut dhcp_req: [u8; 512] = [0; 512];

    
    let amt_sent = socket.send_to(&dhcp_req, (Ipv4Addr::BROADCAST, 0))?;
    println!("Sent {} bytes", amt_sent);
    
    let mut recv_buf: [u8; 512] = [0; 512]; 
    let (amt_recv, from_addr) = socket.recv_from(&mut recv_buf)?;
    println!("Received {} bytes from {}", amt_recv, from_addr);

    for i in 0..amt_recv { 
        print!("{:02X} ", recv_buf[i]); // Prints each byte as two uppercase hex digits, followed by a space
    }
    println!();

    Ok(())
}
